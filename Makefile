.PHONY: clean build publish test lint

# Define variables
PACKAGE_NAME = CpGPT

help: ## Show this help message
	@grep -E '^[.a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

clean: ## Clean all autogenerated files and caches
	rm -rf dist
	find . -type f -name "*.DS_Store" -ls -delete
	find . | grep -E "(__pycache__|\.pyc|\.pyo)" | xargs rm -rf
	find . | grep -E ".pytest_cache" | xargs rm -rf
	find . | grep -E ".ipynb_checkpoints" | xargs rm -rf
	rm -f .coverage

clean-logs: ## Remove all log files
	rm -rf logs/**

test: ## Run tests (excluding slow tests)
	poetry run pytest -k "not slow"

test-full: ## Run all tests including slow ones
	poetry run pytest

format: ## Run pre-commit hooks to format code
	pre-commit run -a

build: clean ## Build the package for distribution
	poetry build

# =========================================
# Test PyPI Deployment Setup
# =========================================
# 1. Create a TestPyPI account at https://test.pypi.org/account/register/
# 2. Generate an API token at https://test.pypi.org/manage/account/token/
# 3. Add Test PyPI as a repository:
#    poetry config repositories.testpypi https://test.pypi.org/legacy/
# 4. Configure Poetry with your TestPyPI token:
#    poetry config pypi-token.testpypi YOUR_TEST_PYPI_API_TOKEN
# =========================================

publish-test: build ## Publish the package to Test PyPI
	@echo "Publishing $(PACKAGE_NAME) to Test PyPI..."
	poetry publish -r testpypi

# =========================================
# PyPI Deployment Setup
# =========================================
# 1. Create a PyPI account at https://pypi.org/account/register/
# 2. Generate an API token at https://pypi.org/manage/account/token/
# 3. Configure Poetry with your token:
#    poetry config pypi-token.pypi YOUR_PYPI_API_TOKEN
#
# For more secure token storage:
#    poetry config pypi-token.pypi --password-stdin
#    (then enter token when prompted)
# =========================================

publish: build ## Publish the package to PyPI
	@echo "Publishing $(PACKAGE_NAME) to PyPI..."
	poetry publish

install-local: build ## Install the package locally for testing
	pip install dist/*.whl

release: test lint build publish ## Run the complete release workflow
	@echo "Release complete!"

setup: ## Set up the development environment
	poetry install